net_tt <- add_edges(net_tt,c(V(net_tt)[node],sample(V(net_tt)[tax == letter2 & transfer == "no"],1)))
}else{
net_tt <- add_edges(net_tt,c(V(net_tt)[node],sample(V(net_tt)[tax != letter2 & transfer == "no"],1)))
}
}
}
return(net_tt)
}
random_transfer(net_t,5,2)
net_tt <- random_transfer(net_t,5,2)
plot(set_color(net_tt))
V(net_tt)$transfer
system.time(Transfer(net_tt))
for (i in c(10,50,100,500,1000,5000)){
net_t <- set_color(erdos.renyi.game(i, 0.05, "gnp", directed = FALSE, loops = FALSE))
plot(net_t)
}
for (i in c(10,50,100,500,1000,5000)){
net_t <- erdos.renyi.game(i, 0.05, "gnp", directed = FALSE, loops = FALSE)
plot(net_t)
}
for (i in c(10,50,100,500,1000,5000)){
net_t <- erdos.renyi.game(i, 0.05, "gnp", directed = FALSE, loops = FALSE)
plot(set_color(net_t))
}
net_t
name_assign <- function(graph,x){
paste0(V(graph)$tax, c(1:x))
}
tax_assign <- function (x){
c(rep("A",x),rep("B",100-x))
}
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
net_t <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
plot(net_t)
}
name_assign <- function(graph,x){
V(graph)$name <- paste0(V(graph)$tax, c(1:x))
}
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
net_t <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
plot(net_t)
}
name_assign <- function(graph,x){
V(graph)$name <- paste0(V(graph)$tax, c(1:x))
}
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
net_t <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
plot(net_t)
}
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
plot(net_t)
}
i
connectivity
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
V(net_t)$tax
tax_assign <- function (x){
c(rep("A",x),rep("B",x*2-x))
}
net_t <- set_color(name_assign(net_t, i/2))
net_t
net_t <- name_assign(net_t,5)
net_t
tax_assign <- function (x){
c(rep("A",x),rep("B",x*2-x))
}
name_assign <- function(graph,x){
V(graph)$name <- paste0(V(graph)$tax, c(1:x))
return(graph)
}
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
plot(net_t)
}
net_t
V(net_t)[tax == "A"]
V(net_t)[tax == "B"]
plot(net_t, vertex.size = 10)
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/10,i/10)
system.time(Transfer(net_t))
}
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/10,i/10)
print(system.time(Transfer(net_t)))
}
for (i in c(10,50,100,500,1000,5000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/10,i/10)
print(system.time(Transfer(net_t)))
}
for (i in c(10,100,500,1000,5000,10000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/10,i/10)
print(sprintf("Network of %d nodes",i))
print(system.time(Transfer(net_t)))
}
for (i in c(10,100,500,1000,5000,10000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/2,i/2)
print(sprintf("Network of %d nodes",i))
print(system.time(Transfer(net_t)))
}
for (i in c(10,100,500,1000,5000,10000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/4,i/4)
print(sprintf("Network of %d nodes",i))
print(system.time(Transfer(net_t)))
}
for (i in c(10,100,500,1000,5000,10000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/10,i/10)
print(sprintf("Network of %d nodes",i))
print(system.time(Transfer(net_t)))
}
for (i in c(10,100,500,1000,5000,10000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/2,i/2)
print(sprintf("Network of %d nodes",i))
print(system.time(Transfer(net_t)))
}
for (i in c(10,100,500,1000,5000,10000)){
connectivity <- 1/i * 5
net_t <- erdos.renyi.game(i, connectivity, "gnp", directed = FALSE, loops = FALSE)
V(net_t)$tax <- tax_assign(i/2)
net_t <- set_color(name_assign(net_t, i/2))
net_t <- random_transfer(net_t,i/2,i/2)
print(sprintf("Network of %d nodes",i))
print(system.time(Transfer(net_t)))
}
library(ape)
rtree(1000)
a = rtree(1000)
a
write.tree(a,"tree1000.txt",digits = 5)
library(devtools)
install_git("XPHenry/NetFrac")
install_git("XPHenry/Netfrac")
install_github("XPHenry/Netfrac")
library(devtools)
install_github("XPHenry/Netfrac")
NetFrac(CAT03env)
library(NetFrac)
NetFrac(CAT_env)
NetFrac(CAT03env)
NetFrac(CAT03env,"Transfer")
NetFrac(CAT03env,"Transfer2")
NetFrac(CAT03env,"Spath")
NetFrac(CAT03env,"Spaths")
warnings()
rm("NetFrac")
rm("Transfer")
rm("dist_par")
rm("dist_paths")
rm("set_color")
rm("subgroup_graph")
rm("shortest_paths_graph")
NetFrac(CAT_env)
NetFrac(CAT_env,"Transfer")
NetFrac(CAT_env,"Transfer2")
library(ape)
tree1= rtree(100)
tree1
tree1$edge
tree1$Nnode
tree1$tip.label
tree1$edge.length
tree1$edge["t74"]
tree1$edge[which("t74" in tree1$edge)]
tree1$edge[which("t74" %in% tree1$edge)]
tree1$edge
tree1$edge[which(74 %in% tree1$edge)]
tree1$edge[which(192 %in% tree1$edge)]
which(192 %in% tree1$edge)
which(100 %in% tree1$edge)
tree5000 = rtree(5000)
write.tree(tree5000, "../Test1/Trees/tree5000.txt")
write.tree(tree5000, "../Test1/Trees/tree5000.txt", digits = 5)
write.tree(tree5000, "../Test1/Trees/tree5000.txt", digits = 4)
tree500 = rtree(500)
write.tree(tree500, "tree500.txt", digits = 4)
v <- 1:3
names(v)
names(v) <- c(1,2,3)
v[4] <- 4
names(v[4])
x = c(12L,6L,10L,8L,15L,14L)
median(x)
x = c(12L,6L,10L,8L,15L,14L,19L)
median(x)
library(rlist)
V(CAT_env)
library(igraph)
V(CAT_env)
V(CAT_env)$pred
V(CAT_env)$transfer
V(CAT03env)
V(CAT03env)$pred
V(CAT03env)$transfer
V(net_t)
V(net_t)$transfer
V(net_tt)$transfer
list.count(V(net_tt)$transfer,"yes")
list.count(V(net_tt)$transfer,"no")
length(V(net_tt)[transfer == "yes"])
NetFrac::Transfer(net_tt)
library(plyr)
NetFrac::Transfer(net_tt)
source('C:/Users/bioinfo/Desktop/Tissicca/Test1/R/transfer_dist2.R')
source('C:/Users/bioinfo/Desktop/Tissicca/Test2/R/transfer_dist.R')
Transfer(net_tt)
library(NetFrac)
Transfer(net_tt)
length(V(net_tt)[transfer == "yes"])
length(Transfer(net_tt) == "yes")
a = Transfer(net_tt)
a == "yes"
length(a == "yes")
length(which(a == "yes" == TRUE))
length(which(a ==  "yes"))
#===========================================================================================
#iterate in many folders with tree size, and calculate transfer and f1 score of the transfer
#===========================================================================================
#all_f1score <- list()
#all_recall <- list()
all_absscore <- list()
setwd("C:/Users/bioinfo/Desktop/Tissicca/Test1")
for (i in seq(10,100,10)){
file_comm <- list.files(sprintf("Trees/tree_%d",i), pattern = "*comm.txt", full.names = TRUE)
file_edge <- list.files(sprintf("Trees/tree_%d",i), pattern = "*edges.txt", full.names = TRUE)
#lnet <- mapply(load_network,file_edge,file_comm)
F1_scores <- c()
Recall_score <- c()
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
# all_f1score[[i/10]] <- F1_scores
# all_recall[[i/10]] <- Recall_score
all_absscore[i/10] <- mean(Abs_score)
}
all_absscore
unlist(all_absscore)
a = load_network_pred("Trees/tree_10/tree1_edges.txt","Trees/tree_10/tree1_comm.txt","equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
Abs_score
Abs_score <- c()
a = load_network_pred("Trees/tree_10/tree1_edges.txt","Trees/tree_10/tree1_comm.txt","equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
Abs_score
a = load_network_pred("Trees/tree_10/tree2_edges.txt","Trees/tree_10/tree2_comm.txt","equal")
truth <- noquote(V(a)$transfer)
a = load_network_pred("Trees/tree_10/tree3_edges.txt","Trees/tree_10/tree3_comm.txt","equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
Abs_score
truth
pred
a = load_network_pred("Trees/tree_100/tree3_edges.txt","Trees/tree_100/tree3_comm.txt","equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
Abs_score
truth
pred
#===========================================================================================
#iterate in many folders with tree size, and calculate transfer and f1 score of the transfer
#===========================================================================================
#all_f1score <- list()
#all_recall <- list()
all_absscore <- list()
for (i in seq(10,100,10)){
file_comm <- list.files(sprintf("Trees/tree_%d",i), pattern = "*comm.txt", full.names = TRUE)
file_edge <- list.files(sprintf("Trees/tree_%d",i), pattern = "*edges.txt", full.names = TRUE)
#lnet <- mapply(load_network,file_edge,file_comm)
F1_scores <- c()
Recall_score <- c()
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
# all_f1score[[i/10]] <- F1_scores
# all_recall[[i/10]] <- Recall_score
all_absscore[i/10] <- mean(Abs_score)
}
all_absscore
unlist(Abs_score)
unlist(all_absscore)
Abs_score[!(Abs_score > 20)]
mean(Abs_score[!(Abs_score > 20)])
#===========================================================================================
#iterate in many folders with tree size, and calculate transfer and f1 score of the transfer
#===========================================================================================
#all_f1score <- list()
#all_recall <- list()
all_absscore <- list()
#for (i in seq(10,100,10)){
for (i in c(10,100))
{
}
#for (i in seq(10,100,10)){
for (i in c(10,100)){
file_comm <- list.files(sprintf("Trees/tree_%d",i), pattern = "*comm.txt", full.names = TRUE)
file_edge <- list.files(sprintf("Trees/tree_%d",i), pattern = "*edges.txt", full.names = TRUE)
#lnet <- mapply(load_network,file_edge,file_comm)
F1_scores <- c()
Recall_score <- c()
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
# all_f1score[[i/10]] <- F1_scores
# all_recall[[i/10]] <- Recall_score
all_absscore[i/10] <- mean(Abs_score)
}
all_absscore
#===========================================================================================
#iterate in many folders with tree size, and calculate transfer and f1 score of the transfer
#===========================================================================================
#all_f1score <- list()
#all_recall <- list()
all_absscore <- list()
#for (i in seq(10,100,10)){
for (i in c(10,100)){
file_comm <- list.files(sprintf("Trees/tree_%d",i), pattern = "*comm.txt", full.names = TRUE)
file_edge <- list.files(sprintf("Trees/tree_%d",i), pattern = "*edges.txt", full.names = TRUE)
#lnet <- mapply(load_network,file_edge,file_comm)
F1_scores <- c()
Recall_score <- c()
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
# all_f1score[[i/10]] <- F1_scores
# all_recall[[i/10]] <- Recall_score
all_absscore <- mean(Abs_score)
}
all_absscore
Abs_score
#for (i in seq(10,100,10)){
for (i in c(10,100)){
print(i)
file_comm <- list.files(sprintf("Trees/tree_%d",i), pattern = "*comm.txt", full.names = TRUE)
file_edge <- list.files(sprintf("Trees/tree_%d",i), pattern = "*edges.txt", full.names = TRUE)
#lnet <- mapply(load_network,file_edge,file_comm)
F1_scores <- c()
Recall_score <- c()
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
# all_f1score[[i/10]] <- F1_scores
# all_recall[[i/10]] <- Recall_score
all_absscore <- mean(Abs_score)
}
i
file_comm <- list.files(sprintf("Trees/tree_%d",i), pattern = "*comm.txt", full.names = TRUE)
file_edge <- list.files(sprintf("Trees/tree_%d",i), pattern = "*edges.txt", full.names = TRUE)
#lnet <- mapply(load_network,file_edge,file_comm)
F1_scores <- c()
Recall_score <- c()
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
# all_f1score[[i/10]] <- F1_scores
# all_recall[[i/10]] <- Recall_score
all_absscore <- mean(Abs_score)
Abs_score
file_comm
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
j
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
a
V(a)$name
V(a)$transfer
file_comm <- list.files(sprintf("Trees/tree_%d",i), pattern = "*comm.txt", full.names = TRUE)
file_edge <- list.files(sprintf("Trees/tree_%d",i), pattern = "*edges.txt", full.names = TRUE)
#lnet <- mapply(load_network,file_edge,file_comm)
F1_scores <- c()
Recall_score <- c()
Abs_score <- c()
for( j in 1:length(file_comm)){
#F1 score / recall
a = load_network_pred(file_edge[j],file_comm[j],"equal")
truth <- noquote(V(a)$transfer)
pred <- Transfer(a)
# F1_scores <- append(F1_scores,F1_Score(truth,pred,"yes"))
# F1_scores[is.na(F1_scores)] <- 0
# Recall_score <- append(Recall_score,Recall(truth,pred))
#Absolute score
Abs_score <- append(Abs_score,abs(length(which(truth == "yes")) - length(which(pred == "yes"))))
}
all_absscore
Abs_score
# all_f1score[[i/10]] <- F1_scores
# all_recall[[i/10]] <- Recall_score
all_absscore <- mean(Abs_score)
all_absscore
NetFrac::CAT_env
